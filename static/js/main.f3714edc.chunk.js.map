{"version":3,"sources":["Balances.jsx","BlockNumber.jsx","ChainState.jsx","DeveloperConsole.jsx","Events.jsx","TxButton.jsx","Extrinsics.jsx","Metadata.jsx","NodeInfo.jsx","Transfer.jsx","Upgrade.jsx","index.jsx","App.jsx"],"names":["Balances","props","api","accounts","keyring","getPairs","accountNames","map","account","meta","name","useState","balances","setBalances","addresses","useMemo","address","useEffect","unsubscribeAll","query","freeBalance","multi","currentBalances","balancesMap","reduce","acc","index","toString","then","unsub","catch","console","error","Grid","Column","Table","celled","striped","size","Body","Row","key","Cell","textAlign","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","number","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","label","value","extra","Icon","Metadata","modulesList","setModulesList","output","setOutput","storageItemsList","setStorageItemsList","module","storageItem","input","formState","setFormState","modules","Object","keys","sort","text","storageItems","storage","onChange","_","data","state","runQuery","a","result","Form","Field","Dropdown","placeholder","fluid","search","selection","options","Input","type","Button","onClick","primary","util","require","util_crypto","window","eventFeed","setEventFeed","filter","system","events","forEach","record","event","phase","types","typeDef","eventName","section","method","params","includes","feedEvent","icon","date","summary","extraText","documentation","join","content","e","Feed","style","overflow","maxHeight","TxButton","fromPair","setStatus","tx","sudo","makeCall","source","isInjected","web3FromSource","injected","fromParam","setSigner","signer","signAndSend","status","isFinalized","asFinalized","callableFunctionList","setCallableFunctionList","addressFrom","callableFunction","getPair","keyringOptions","toUpperCase","callableFunctions","callable","metadata","setMetadata","version","setVersion","rpc","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","NodeInfo","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","href","Transfer","addressTo","amount","transfer","fileReader","proposal","setProposal","adminPair","handleFileRead","buffer","Array","from","Uint8Array","b","padStart","newProposal","setCode","accept","file","target","files","FileReader","onloadend","readAsArrayBuffer","ReactDOM","render","setApi","apiReady","setApiReady","accountLoaded","setaccountLoaded","provider","WsProvider","ApiPromise","create","isReady","web3Enable","extensions","web3Accounts","injectedAccounts","loadAccounts","loadAll","isDevelopment","loader","Dimmer","active","Loader","Container","marginTop","stackable","columns","stretched","document","getElementById"],"mappings":"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","file":"static/js/main.f3714edc.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport { Table, Grid } from \"semantic-ui-react\";\n\nexport default function Balances(props) {\n  const { api, keyring } = props;\n  const accounts = keyring.getPairs();\n  const accountNames = accounts.map(account => account.meta.name);\n  const [balances, setBalances] = useState({});\n  const addresses = useMemo(() => accounts.map(account => account.address),[accounts]);\n\n  useEffect(() => {\n    let unsubscribeAll;\n\n    api.query.balances.freeBalance\n      .multi(addresses, currentBalances => {\n        const balancesMap = addresses.reduce(\n          (acc, address, index) => ({\n            ...acc,\n            [address]: currentBalances[index].toString()\n          }),\n          {}\n        );\n        setBalances(balancesMap);\n      })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.balances.freeBalance, setBalances, addresses]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size=\"small\">\n        <Table.Body>\n          {addresses.map((address, index) => {\n            return (\n              <Table.Row key={index}>\n                <Table.Cell textAlign=\"right\">{accountNames[index]}</Table.Cell>\n                <Table.Cell>{address}</Table.Cell>\n                <Table.Cell>{balances && balances[address]}</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Statistic, Grid, Card, Icon } from \"semantic-ui-react\";\n\nexport default function BlockNumber(props) {\n  const { api, finalized } = props;\n\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll;\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n    .then(unsub => {\n      unsubscribeAll = unsub;\n    })\n    .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <>\n      <Grid.Column>\n        <Card>\n          <Card.Content textAlign=\"center\">\n            <Statistic\n              label={(finalized ? \"Finalized\" : \"Current\") + \" Block Number\"}\n              value={blockNumber}\n            />\n          </Card.Content>\n          <Card.Content extra>\n            <Icon name=\"time\" /> {blockNumberTimer}\n          </Card.Content>\n        </Card>\n      </Grid.Column>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Form, Dropdown, Button, Input } from \"semantic-ui-react\";\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  const [modulesList, setModulesList] = useState([]);\n  const [output, setOutput] = useState(\"\");\n  const [storageItemsList, setStorageItemsList] = useState([]);\n\n  const initialState = {\n    module: \"\",\n    storageItem: \"\",\n    input: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { module, storageItem, input } = formState;\n\n  useEffect(() => {\n    let modules = Object.keys(api.query).sort().map(module => ({\n      key: module,\n      value: module,\n      text: module\n    }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== \"\") {\n      let storageItems = Object.keys(api.query[module]).sort().map(storage => ({\n        key: storage,\n        value: storage,\n        text: storage\n      }));\n\n      setStorageItemsList(storageItems);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  const runQuery = async () => {\n    try {\n      let result = await api.query[module][storageItem](input);\n      setOutput(result.toString());\n    } catch (e) {\n\t\tsetOutput(e.toString())\n\t}\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Chain State</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a module to query\"\n            fluid\n            label=\"Module\"\n            onChange={onChange}\n            search\n            selection\n            state=\"module\"\n            options={modulesList}\n            value={module}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a storage item to query\"\n            fluid\n            label=\"Storage Item\"\n            onChange={onChange}\n            search\n            selection\n            state=\"storageItem\"\n            options={storageItemsList}\n            value={storageItem}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Input\"\n            fluid\n            placeholder=\"May not be needed\"\n            state=\"input\"\n            type=\"text\"\n            value={input}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Button onClick={runQuery} primary type=\"submit\">\n            Query\n          </Button>{\" \"}\n          {output}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","// This component will simply add utility functions to your developer console.\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  let util = require(\"@polkadot/util\");\n  let util_crypto = require(\"@polkadot/util-crypto\");\n  let keyring = require(\"@polkadot/keyring\");\n\n  window.api = api;\n  window.util = util;\n  window.util_crypto = util_crypto;\n  window.keyring = keyring;\n\n  return null;\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Feed, Grid } from \"semantic-ui-react\";\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        let eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        // loop through each of the parameters, displaying the type and data\n        let params = event.data.map((data, index) => {\n          return `${types[index].type}: ${data.toString()}`;\n        });\n\n        if (!filter.includes(eventName)) {\n          let feedEvent = {\n            icon: \"bell\",\n            date: \"X Blocks Ago\",\n            summary: eventName,\n            extraText: event.meta.documentation.join().toString(),\n            content: params\n          };\n\n          setEventFeed(e => [feedEvent, ...e]);\n        }\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: \"auto\", maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { web3FromSource } from \"@polkadot/extension-dapp\";\n\nexport default function TxButton({\n  api,\n  fromPair,\n  label,\n  params,\n  setStatus,\n  tx,\n  sudo = false\n}) {\n  const makeCall = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = fromPair;\n    let fromParam;\n\n    //set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = fromPair;\n    }\n    setStatus(\"Sending...\");\n\n    // Check if this transaction needs sudo\n    let transaction;\n    if (sudo) {\n      transaction = tx.sudo(...params);\n    } else {\n      transaction = tx(...params);\n    }\n\n    transaction\n      .signAndSend(fromParam, ({ status }) => {\n        if (status.isFinalized) {\n          setStatus(\n            `Completed at block hash #${status.asFinalized.toString()}`\n          );\n        } else {\n          setStatus(`Current transaction status: ${status.type}`);\n        }\n      })\n      .catch(e => {\n        setStatus(\":( transaction failed\");\n        console.error(\"ERROR:\", e);\n      });\n  };\n\n  return (\n    <Button onClick={makeCall} primary type=\"submit\">\n      {label}\n    </Button>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Form, Dropdown, Input } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Metadata(props) {\n  const { api, keyring } = props;\n\n  const [modulesList, setModulesList] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [callableFunctionList, setCallableFunctionList] = useState([]);\n\n  const initialState = {\n    addressFrom: \"\",\n    module: \"\",\n    callableFunction: \"\",\n    input: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { addressFrom, module, callableFunction, input } = formState;\n  const fromPair = !!addressFrom && keyring.getPair(addressFrom);\n\n  // get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase()\n  }));\n\n  useEffect(() => {\n    let modules = Object.keys(api.tx)\n      .sort()\n      .map(module => ({\n        key: module,\n        value: module,\n        text: module\n      }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== \"\") {\n      let callableFunctions = Object.keys(api.tx[module])\n        .sort()\n        .map(callable => ({\n          key: callable,\n          value: callable,\n          text: callable\n        }));\n\n      setCallableFunctionList(callableFunctions);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Extrinsics</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select from  your accounts\"\n            fluid\n            label=\"From\"\n            onChange={onChange}\n            search\n            selection\n            state=\"addressFrom\"\n            options={keyringOptions}\n            value={addressFrom}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a module to call\"\n            fluid\n            label=\"Module\"\n            onChange={onChange}\n            search\n            selection\n            state=\"module\"\n            options={modulesList}\n            value={module}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a function to call\"\n            fluid\n            label=\"Callable Function\"\n            onChange={onChange}\n            search\n            selection\n            state=\"callableFunction\"\n            options={callableFunctionList}\n            value={callableFunction}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Input\"\n            fluid\n            placeholder=\"May not be needed\"\n            state=\"input\"\n            type=\"text\"\n            value={input}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            fromPair={fromPair}\n            label={\"Call\"}\n            params={[input]}\n            setStatus={setStatus}\n            tx={api.tx && api.tx[module] && api.tx[module][callableFunction]}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Modal, Button, Card } from \"semantic-ui-react\";\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  const [metadata, setMetadata] = useState(0);\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    api.rpc.state.getMetadata(meta => {\n\t  setMetadata(meta);\n\t  setVersion(meta.version);\n    });\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n\t\t  <Card.Meta>\n            <span>v{version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Card, Icon, Grid } from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { api } = props;\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = () => {\n      Promise.all([\n        api.rpc.system.chain(),\n        api.rpc.system.name(),\n        api.rpc.system.version()\n      ])\n        .then(([chain, nodeName, nodeVersion]) => {\n          setNodeInfo({\n            chain,\n            nodeName,\n            nodeVersion\n          });\n        })\n        .catch(e => console.error(e));\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{\" \"}\n            <a href=\"https://github.com/substrate-developer-hub/substrate-ui-template\">\n              Substrate UI Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name=\"setting\" />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Dropdown, Form, Input, Grid } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Transfer(props) {\n  const { api, keyring } = props;\n  const [status, setStatus] = useState(\"\");\n  const initialState = {\n    addressFrom: \"\",\n    addressTo: \"\",\n    amount: 0\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { addressTo, addressFrom, amount } = formState;\n  const fromPair = !!addressFrom && keyring.getPair(addressFrom);\n\n  // get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase()\n  }));\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select from  your accounts\"\n            fluid\n            label=\"From\"\n            onChange={onChange}\n            search\n            selection\n            state=\"addressFrom\"\n            options={keyringOptions}\n            value={addressFrom}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"To\"\n            fluid\n            placeholder=\"address\"\n            state=\"addressTo\"\n            type=\"text\"\n            value={addressTo}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            label=\"Amount\"\n            fluid\n            onChange={onChange}\n            state=\"amount\"\n            type=\"number\"\n            value={amount}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            fromPair={fromPair}\n            label={\"Send\"}\n            params={[addressTo, amount]}\n            setStatus={setStatus}\n            tx={api.tx.balances.transfer}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Dropdown, Form, Input, Grid } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Transfer(props) {\n  const { api, keyring } = props;\n  const [status, setStatus] = useState(\"\");\n  const [proposal, setProposal] = useState({});\n  const initialState = {\n    addressFrom: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { addressFrom } = formState;\n  const adminPair = !!addressFrom && keyring.getPair(addressFrom);\n\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase()\n  }));\n\n  let fileReader;\n\n  const bufferToHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  };\n\n  const handleFileRead = e => {\n    const content = bufferToHex(fileReader.result);\n    const newProposal = api.tx.system.setCode(`0x${content}`);\n    setProposal(newProposal);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Upgrade Runtime</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select from your accounts\"\n            fluid\n            label=\"From\"\n            onChange={onChange}\n            search\n            selection\n            state=\"addressFrom\"\n            options={keyringOptions}\n            value={addressFrom}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            type=\"file\"\n            id=\"file\"\n            label=\"Wasm File\"\n            accept=\".wasm\"\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            fromPair={adminPair}\n            label={\"Upgrade\"}\n            params={[proposal]}\n            setStatus={setStatus}\n            tx={api.tx.sudo}\n            sudo={true}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport { web3Accounts, web3Enable } from \"@polkadot/extension-dapp\";\nimport keyring from \"@polkadot/ui-keyring\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Dimmer, Loader, Grid } from \"semantic-ui-react\";\n\nimport Balances from \"./Balances\";\nimport BlockNumber from \"./BlockNumber\";\nimport ChainState from \"./ChainState\";\nimport DeveloperConsole from \"./DeveloperConsole\";\nimport Events from \"./Events\";\nimport Extrinsics from \"./Extrinsics\";\nimport Metadata from \"./Metadata\";\nimport NodeInfo from \"./NodeInfo\";\nimport Transfer from \"./Transfer\";\nimport Upgrade from \"./Upgrade\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nexport default function App() {\n  const [api, setApi] = useState();\n  const [apiReady, setApiReady] = useState();\n  const [accountLoaded, setaccountLoaded] = useState(false);\n  //const WS_PROVIDER = \"ws://127.0.0.1:9944\";\n  const WS_PROVIDER = \"wss://dev-node.substrate.dev:9944\";\n\n  useEffect(() => {\n    const provider = new WsProvider(WS_PROVIDER);\n\n    const TYPES = {};\n    //const TYPES = {\"MyNumber\": \"u32\"};\n    // More information on custom types\n    // https://github.com/polkadot-js/apps/blob/master/packages/app-settings/src/md/basics.md\n\n    ApiPromise.create({\n      provider,\n      types: TYPES\n    })\n      .then(api => {\n        setApi(api);\n        api.isReady.then(() => setApiReady(true));\n      })\n      .catch(e => console.error(e));\n  }, []);\n\n  // new hook to get injected accounts\n  useEffect(() => {\n    web3Enable(\"substrate-front-end-tutorial\")\n      .then(extensions => {\n        // web3Account promise resolves with an array of injected accounts\n        // or an empty array (e.g user has no extension, or not given access to their accounts)\n        web3Accounts()\n          .then(accounts => {\n            // add the source to the name to avoid confusion\n            return accounts.map(({ address, meta }) => ({\n              address,\n              meta: {\n                ...meta,\n                name: `${meta.name} (${meta.source})`\n              }\n            }));\n          })\n          // load our keyring with the newly injected accounts\n          .then(injectedAccounts => {\n            loadAccounts(injectedAccounts);\n          })\n          .catch(console.error);\n      })\n      .catch(console.error);\n  }, []);\n\n  const loadAccounts = injectedAccounts => {\n    keyring.loadAll(\n      {\n        isDevelopment: true\n      },\n      injectedAccounts\n    );\n    setaccountLoaded(true);\n  };\n\n  const loader = function(text) {\n    return (\n      <Dimmer active>\n        <Loader size=\"small\">{text}</Loader>\n      </Dimmer>\n    );\n  };\n\n  if (!apiReady) {\n    return loader(\"Connecting to the blockchain\");\n  }\n\n  if (!accountLoaded) {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  return (\n    <Container style={{ marginTop: \"3em\" }}>\n      <Grid stackable columns=\"equal\">\n        <Grid.Row stretched>\n          <NodeInfo api={api} />\n          <Metadata api={api} />\n          <BlockNumber api={api} />\n          <BlockNumber api={api} finalized />\n        </Grid.Row>\n        <Grid.Row stretched>\n          <Balances api={api} keyring={keyring} />\n        </Grid.Row>\n        <Grid.Row>\n          <Transfer api={api} keyring={keyring} />\n          <Upgrade api={api} keyring={keyring} />\n        </Grid.Row>\n        <Grid.Row>\n          <Extrinsics api={api} keyring={keyring} />\n          <ChainState api={api} />\n          <Events api={api} />\n        </Grid.Row>\n      </Grid>\n      {/* These components don't render elements. */}\n      <DeveloperConsole api={api} />\n    </Container>\n  );\n}\n"],"sourceRoot":""}