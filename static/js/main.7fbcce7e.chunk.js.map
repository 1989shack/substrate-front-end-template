{"version":3,"sources":["AccountSelector.jsx","Balances.jsx","BlockNumber.jsx","ChainState.jsx","DeveloperConsole.jsx","Events.jsx","TxButton.jsx","Extrinsics.jsx","Metadata.jsx","NodeInfo.jsx","examples/ProofOfExistence.jsx","examples/TemplateModule.jsx","Transfer.jsx","Upgrade.jsx","index.jsx","App.jsx"],"names":["NodeInfo","props","keyring","setAccountAddress","api","useState","accountSelected","setAccountSelected","accountBalance","setAccountBalance","keyringOptions","getPairs","map","account","key","address","value","text","meta","name","toUpperCase","icon","initialAddress","length","useEffect","unsubscribe","query","balances","freeBalance","balance","toString","then","unsub","catch","console","error","Menu","attached","tabular","style","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","Icon","circular","color","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","Label","pointing","Balances","accounts","setBalances","unsubscribeAll","addresses","multi","currentBalances","balancesMap","reduce","acc","index","Grid","Column","Table","celled","striped","Body","Row","Cell","textAlign","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","number","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","label","extra","ChainState","modulesList","setModulesList","output","setOutput","storageItemsList","setStorageItemsList","module","storageItem","input","formState","setFormState","modules","Object","keys","sort","storageItems","storage","data","state","runQuery","a","result","Form","Field","fluid","Input","type","Button","onClick","primary","Metadata","util","require","util_crypto","window","Events","eventFeed","setEventFeed","filter","system","events","forEach","record","event","phase","types","typeDef","eventName","section","method","params","includes","feedEvent","date","summary","extraText","documentation","join","content","e","Feed","overflow","maxHeight","TxButton","accountPair","setStatus","tx","disabled","sudo","makeCall","source","isInjected","web3FromSource","injected","fromParam","setSigner","signer","signAndSend","status","isFinalized","asFinalized","Extrinsics","callableFunctionList","setCallableFunctionList","callableFunction","callableFunctions","callable","metadata","setMetadata","version","setVersion","rpc","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","href","ProofOfExistence","fileReader","digest","setDigest","owner","setOwner","block","setBlock","bufferToDigest","Array","from","Uint8Array","b","padStart","hash","blake2AsHex","isClaimed","poe","proofs","success","warning","file","target","files","FileReader","onloadend","readAsArrayBuffer","Message","header","list","createClaim","revokeClaim","Transfer","currentValue","setCurrentValue","formValue","setFormValue","templateModule","something","newValue","isNone","unwrap","doSomething","addressTo","amount","transfer","Upgrade","proposal","setProposal","handleFileRead","buffer","newProposal","setCode","accept","ReactDOM","render","setApi","apiReady","setApiReady","accountLoaded","setAccountLoaded","accountAddress","getPair","provider","WsProvider","ApiPromise","create","isReady","web3Enable","extensions","web3Accounts","injectedAccounts","loadAccounts","loadAll","isDevelopment","loader","Dimmer","active","Loader","contextRef","createRef","ref","Sticky","context","stackable","columns","stretched","document","getElementById"],"mappings":"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","file":"static/js/main.7fbcce7e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {\n  Menu,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { keyring, setAccountAddress, api } = props;\n  const [accountSelected, setAccountSelected] = useState(\"\");\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: \"user\"\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : \"\";\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    if (accountSelected) {\n      api.query.balances\n        .freeBalance(accountSelected, balance => {\n          setAccountBalance(balance.toString());\n        })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n    }\n\n    return () => unsubscribe && unsubscribe();\n  }, [accountSelected, api.query.balances]);\n\n  return (\n    <Menu\n      attached=\"top\"\n      tabular\n      style={{\n        backgroundColor: \"#fff\",\n        borderColor: \"#fff\",\n        paddingTop: \"1em\",\n        paddingBottom: \"1em\"\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src=\"Substrate-Logo.png\" size=\"mini\" />\n        </Menu.Menu>\n        <Menu.Menu position=\"right\">\n          <Icon\n            name=\"users\"\n            size=\"large\"\n            circular\n            color={accountSelected ? \"green\" : \"red\"}\n          ></Icon>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder=\"Select an account\"\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n          {api.query.balances && accountSelected ? (\n            <Label pointing=\"left\">\n              <Icon\n                name=\"money bill alternate\"\n                color={accountBalance > 0 ? \"green\" : \"red\"}\n              />\n              {accountBalance}\n            </Label>\n          ) : (\n            \"\"\n          )}\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Table, Grid } from \"semantic-ui-react\";\n\nexport default function Balances(props) {\n  const { api, keyring } = props;\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll;\n\n    api.query.balances.freeBalance\n      .multi(addresses, currentBalances => {\n        const balancesMap = addresses.reduce(\n          (acc, address, index) => ({\n            ...acc,\n            [address]: currentBalances[index].toString()\n          }),\n          {}\n        );\n        setBalances(balancesMap);\n      })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.balances.freeBalance, setBalances, keyring]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size=\"small\">\n        <Table.Body>\n          {accounts.map(account => {\n            return (\n              <Table.Row key={account.address}>\n                <Table.Cell textAlign=\"right\">{account.meta.name}</Table.Cell>\n                <Table.Cell>{account.address}</Table.Cell>\n                <Table.Cell>{balances && balances[account.address]}</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Statistic, Grid, Card, Icon } from \"semantic-ui-react\";\n\nexport default function BlockNumber(props) {\n  const { api, finalized } = props;\n\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll;\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n    .then(unsub => {\n      unsubscribeAll = unsub;\n    })\n    .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <>\n      <Grid.Column>\n        <Card>\n          <Card.Content textAlign=\"center\">\n            <Statistic\n              label={(finalized ? \"Finalized\" : \"Current\") + \" Block Number\"}\n              value={blockNumber}\n            />\n          </Card.Content>\n          <Card.Content extra>\n            <Icon name=\"time\" /> {blockNumberTimer}\n          </Card.Content>\n        </Card>\n      </Grid.Column>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Form, Dropdown, Button, Input } from \"semantic-ui-react\";\n\nexport default function ChainState(props) {\n  const { api } = props;\n\n  const [modulesList, setModulesList] = useState([]);\n  const [output, setOutput] = useState(\"\");\n  const [storageItemsList, setStorageItemsList] = useState([]);\n\n  const initialState = {\n    module: \"\",\n    storageItem: \"\",\n    input: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { module, storageItem, input } = formState;\n\n  useEffect(() => {\n    let modules = Object.keys(api.query).sort().map(module => ({\n      key: module,\n      value: module,\n      text: module\n    }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== \"\") {\n      let storageItems = Object.keys(api.query[module]).sort().map(storage => ({\n        key: storage,\n        value: storage,\n        text: storage\n      }));\n\n      setStorageItemsList(storageItems);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  const runQuery = async () => {\n    try {\n      let result = await api.query[module][storageItem](input);\n      setOutput(result.toString());\n    } catch (e) {\n\t\tsetOutput(e.toString())\n\t}\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Chain State</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a module to query\"\n            fluid\n            label=\"Module\"\n            onChange={onChange}\n            search\n            selection\n            state=\"module\"\n            options={modulesList}\n            value={module}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a storage item to query\"\n            fluid\n            label=\"Storage Item\"\n            onChange={onChange}\n            search\n            selection\n            state=\"storageItem\"\n            options={storageItemsList}\n            value={storageItem}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Input\"\n            fluid\n            placeholder=\"May not be needed\"\n            state=\"input\"\n            type=\"text\"\n            value={input}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Button onClick={runQuery} primary type=\"submit\">\n            Query\n          </Button>{\" \"}\n          {output}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","// This component will simply add utility functions to your developer console.\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  let util = require(\"@polkadot/util\");\n  let util_crypto = require(\"@polkadot/util-crypto\");\n  let keyring = require(\"@polkadot/keyring\");\n\n  window.api = api;\n  window.util = util;\n  window.util_crypto = util_crypto;\n  window.keyring = keyring;\n\n  return null;\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Feed, Grid } from \"semantic-ui-react\";\n\nexport default function Events(props) {\n  const { api } = props;\n\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        let eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        // loop through each of the parameters, displaying the type and data\n        let params = event.data.map((data, index) => {\n          return `${types[index].type}: ${data.toString()}`;\n        });\n\n        if (!filter.includes(eventName)) {\n          let feedEvent = {\n            icon: \"bell\",\n            date: \"X Blocks Ago\",\n            summary: eventName,\n            extraText: event.meta.documentation.join().toString(),\n            content: params\n          };\n\n          setEventFeed(e => [feedEvent, ...e]);\n        }\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: \"auto\", maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { web3FromSource } from \"@polkadot/extension-dapp\";\n\nexport default function TxButton({\n  api,\n  accountPair,\n  label,\n  params,\n  setStatus,\n  tx,\n  disabled,\n  sudo = false\n}) {\n  const makeCall = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    //set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus(\"Sending...\");\n\n    // Check if this transaction needs sudo\n    let transaction;\n    if (sudo) {\n      transaction = tx.sudo(...params);\n    } else {\n      transaction = tx(...params);\n    }\n\n    transaction\n      .signAndSend(fromParam, ({ status }) => {\n        if (status.isFinalized) {\n          setStatus(\n            `Completed at block hash #${status.asFinalized.toString()}`\n          );\n        } else {\n          setStatus(`Current transaction status: ${status.type}`);\n        }\n      })\n      .catch(e => {\n        setStatus(\":( transaction failed\");\n        console.error(\"ERROR:\", e);\n      });\n  };\n\n  return (\n    <Button onClick={makeCall} primary type=\"submit\" disabled={!accountPair || disabled}>\n      {label}\n    </Button>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Form, Dropdown, Input } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair } = props;\n\n  const [modulesList, setModulesList] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [callableFunctionList, setCallableFunctionList] = useState([]);\n\n  const initialState = {\n    module: \"\",\n    callableFunction: \"\",\n    input: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { module, callableFunction, input } = formState;\n\n  useEffect(() => {\n    let modules = Object.keys(api.tx)\n      .sort()\n      .map(module => ({\n        key: module,\n        value: module,\n        text: module\n      }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== \"\") {\n      let callableFunctions = Object.keys(api.tx[module])\n        .sort()\n        .map(callable => ({\n          key: callable,\n          value: callable,\n          text: callable\n        }));\n\n      setCallableFunctionList(callableFunctions);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Extrinsics</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a module to call\"\n            fluid\n            label=\"Module\"\n            onChange={onChange}\n            search\n            selection\n            state=\"module\"\n            options={modulesList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a function to call\"\n            fluid\n            label=\"Callable Function\"\n            onChange={onChange}\n            search\n            selection\n            state=\"callableFunction\"\n            options={callableFunctionList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Input\"\n            fluid\n            placeholder=\"May not be needed\"\n            state=\"input\"\n            type=\"text\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Call\"}\n            params={[input]}\n            setStatus={setStatus}\n            tx={api.tx && api.tx[module] && api.tx[module][callableFunction]}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Modal, Button, Card } from \"semantic-ui-react\";\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  const [metadata, setMetadata] = useState(0);\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    api.rpc.state.getMetadata(meta => {\n\t  setMetadata(meta);\n\t  setVersion(meta.version);\n    });\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n\t\t  <Card.Meta>\n            <span>v{version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Card, Icon, Grid } from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { api } = props;\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = () => {\n      Promise.all([\n        api.rpc.system.chain(),\n        api.rpc.system.name(),\n        api.rpc.system.version()\n      ])\n        .then(([chain, nodeName, nodeVersion]) => {\n          setNodeInfo({\n            chain,\n            nodeName,\n            nodeVersion\n          });\n        })\n        .catch(e => console.error(e));\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{\" \"}\n            <a href=\"https://github.com/substrate-developer-hub/substrate-front-end-template\">\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name=\"setting\" />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Grid, Message } from \"semantic-ui-react\";\nimport { blake2AsHex } from \"@polkadot/util-crypto\";\n\nimport TxButton from \"../TxButton\";\n\n// Based on the Substrate Proof of Existence module\n// https://github.com/substrate-developer-hub/substrate-proof-of-existence\n\nexport default function ProofOfExistence(props) {\n  const { api, accountPair } = props;\n  const [status, setStatus] = useState(\"\");\n  const [digest, setDigest] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [block, setBlock] = useState(0);\n\n  let fileReader;\n\n  const bufferToDigest = () => {\n    const content = Array.from(new Uint8Array(fileReader.result))\n      .map(b => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n\n    const hash = blake2AsHex(content, 256);\n    setDigest(hash);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = bufferToDigest;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  useEffect(() => {\n    let unsubscribe;\n\n    api.query.poe\n      .proofs(digest, result => {\n        setOwner(result[0].toString());\n        setBlock(result[1].toNumber());\n      })\n      .then(unsub => {\n        unsubscribe = unsub;\n      });\n\n    return () => unsubscribe && unsubscribe();\n  }, [digest, api.query.poe]);\n\n  function isClaimed() {\n    return block !== 0;\n  }\n\n  return (\n    <Grid.Column>\n      <h1>Proof Of Existence</h1>\n      <Form success={digest && !isClaimed()} warning={isClaimed()}>\n        <Form.Field>\n          <Input\n            type=\"file\"\n            id=\"file\"\n            label=\"Your File\"\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n          <Message success header=\"File Digest Unclaimed\" content={digest} />\n          <Message\n            warning\n            header=\"File Digest Claimed\"\n            list={[digest, `Owner: ${owner}`, `Block: ${block}`]}\n          />\n        </Form.Field>\n\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Create Claim\"}\n            setStatus={setStatus}\n            params={[digest]}\n            tx={api.tx.poe.createClaim}\n            disabled={isClaimed() || !digest}\n          />\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Revoke Claim\"}\n            setStatus={setStatus}\n            params={[digest]}\n            tx={api.tx.poe.revokeClaim}\n            disabled={!isClaimed() || owner !== accountPair.address}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Grid, Card, Statistic } from \"semantic-ui-react\";\n\nimport TxButton from \"../TxButton\";\n\nexport default function Transfer(props) {\n  const { api, accountPair } = props;\n\n  // The transaction submission status\n  const [status, setStatus] = useState(\"\");\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone){\n        setCurrentValue(\"<None>\");\n      }\n      else{\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    })\n    .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n\n  }, [api.query.templateModule]);\n\n\n  return (\n    <Grid.Column>\n      <h1>Template Module</h1>\n      <Card>\n      <Card.Content textAlign=\"center\">\n        <Statistic\n          label=\"Current Value\"\n          value={currentValue}\n        />\n      </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            type=\"number\"\n            id=\"new_value\"\n            state=\"newValue\"\n            label=\"New Value\"\n            onChange={(_, {value}) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Store Something\"}\n            params={[formValue]}\n            setStatus={setStatus}\n            tx={api.tx.templateModule.doSomething}\n            sudo={false}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Form, Input, Grid } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Transfer(props) {\n  const { api, accountPair } = props;\n  const [status, setStatus] = useState(\"\");\n  const initialState = {\n    addressTo: \"\",\n    amount: 0\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { addressTo, amount } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"To\"\n            fluid\n            placeholder=\"address\"\n            state=\"addressTo\"\n            type=\"text\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            label=\"Amount\"\n            fluid\n            onChange={onChange}\n            state=\"amount\"\n            type=\"number\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Send\"}\n            params={[addressTo, amount]}\n            setStatus={setStatus}\n            tx={api.tx.balances.transfer}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Form, Input, Grid } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Upgrade(props) {\n  const { api, accountPair } = props;\n  const [status, setStatus] = useState(\"\");\n  const [proposal, setProposal] = useState({});\n\n  let fileReader;\n\n  const bufferToHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  };\n\n  const handleFileRead = e => {\n    const content = bufferToHex(fileReader.result);\n    const newProposal = api.tx.system.setCode(`0x${content}`);\n    setProposal(newProposal);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Upgrade Runtime</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            type=\"file\"\n            id=\"file\"\n            label=\"Wasm File\"\n            accept=\".wasm\"\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Upgrade\"}\n            params={[proposal]}\n            setStatus={setStatus}\n            tx={api.tx.sudo}\n            sudo={true}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport { web3Accounts, web3Enable } from \"@polkadot/extension-dapp\";\nimport keyring from \"@polkadot/ui-keyring\";\nimport React, { useState, useEffect, createRef } from \"react\";\nimport { Container, Dimmer, Loader, Grid, Sticky } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport AccountSelector from \"./AccountSelector\";\nimport Balances from \"./Balances\";\nimport BlockNumber from \"./BlockNumber\";\nimport ChainState from \"./ChainState\";\nimport DeveloperConsole from \"./DeveloperConsole\";\nimport Events from \"./Events\";\nimport Extrinsics from \"./Extrinsics\";\nimport Metadata from \"./Metadata\";\nimport NodeInfo from \"./NodeInfo\";\nimport ProofOfExistence from \"./examples/ProofOfExistence\";\nimport TemplateModule from \"./examples/TemplateModule\";\nimport Transfer from \"./Transfer\";\nimport Upgrade from \"./Upgrade\";\n\nexport default function App() {\n  const [api, setApi] = useState();\n  const [apiReady, setApiReady] = useState();\n  const [accountLoaded, setAccountLoaded] = useState(false);\n  const [accountAddress, setAccountAddress] = useState(\"\");\n\n  //const WS_PROVIDER = \"ws://127.0.0.1:9944\";\n  const WS_PROVIDER = \"wss://dev-node.substrate.dev:9944\";\n\n  const accountPair = accountAddress && keyring.getPair(accountAddress);\n\n  useEffect(() => {\n    const provider = new WsProvider(WS_PROVIDER);\n\n    const TYPES = {};\n    //const TYPES = {\"MyNumber\": \"u32\"};\n    // More information on custom types\n    // https://github.com/polkadot-js/apps/blob/master/packages/app-settings/src/md/basics.md\n\n    ApiPromise.create({\n      provider,\n      types: TYPES\n    })\n      .then(api => {\n        setApi(api);\n        api.isReady.then(() => setApiReady(true));\n      })\n      .catch(e => console.error(e));\n  }, []);\n\n  // new hook to get injected accounts\n  useEffect(() => {\n    web3Enable(\"substrate-front-end-tutorial\")\n      .then(extensions => {\n        // web3Account promise resolves with an array of injected accounts\n        // or an empty array (e.g user has no extension, or not given access to their accounts)\n        web3Accounts()\n          .then(accounts => {\n            // add the source to the name to avoid confusion\n            return accounts.map(({ address, meta }) => ({\n              address,\n              meta: {\n                ...meta,\n                name: `${meta.name} (${meta.source})`\n              }\n            }));\n          })\n          // load our keyring with the newly injected accounts\n          .then(injectedAccounts => {\n            loadAccounts(injectedAccounts);\n          })\n          .catch(console.error);\n      })\n      .catch(console.error);\n  }, []);\n\n  const loadAccounts = injectedAccounts => {\n    keyring.loadAll(\n      {\n        isDevelopment: true\n      },\n      injectedAccounts\n    );\n    setAccountLoaded(true);\n  };\n\n  const loader = function(text) {\n    return (\n      <Dimmer active>\n        <Loader size=\"small\">{text}</Loader>\n      </Dimmer>\n    );\n  };\n\n  if (!apiReady) {\n    return loader(\"Connecting to the blockchain\");\n  }\n\n  if (!accountLoaded) {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector\n          keyring={keyring}\n          setAccountAddress={setAccountAddress}\n          api={api}\n        />\n      </Sticky>\n      <Container>\n        <Grid stackable columns=\"equal\">\n          <Grid.Row stretched>\n            <NodeInfo api={api} />\n            <Metadata api={api} />\n            <BlockNumber api={api} />\n            <BlockNumber api={api} finalized />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Balances api={api} keyring={keyring} />\n          </Grid.Row>\n          <Grid.Row>\n            <Transfer api={api} accountPair={accountPair} />\n            <Upgrade api={api} accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row>\n            <Extrinsics api={api} accountPair={accountPair} />\n            <ChainState api={api} />\n            <Events api={api} />\n          </Grid.Row>\n          {/* These components render if a module is present in the runtime. */}\n          <Grid.Row>\n            { api.query.poe && <ProofOfExistence api={api} accountPair={accountPair}/> }\n            { api.query.templateModule && <TemplateModule api={api} accountPair={accountPair} /> }\n          </Grid.Row>\n        </Grid>\n        {/* These components don't render elements. */}\n        <DeveloperConsole api={api} />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}