{"version":3,"sources":["AccountSelector.jsx","Balances.jsx","BlockNumber.jsx","ChainState.jsx","DeveloperConsole.jsx","Events.jsx","TxButton.jsx","Extrinsics.jsx","Metadata.jsx","NodeInfo.jsx","examples/ProofOfExistence.jsx","examples/TemplateModule.jsx","Transfer.jsx","Upgrade.jsx","index.jsx","App.jsx"],"names":["NodeInfo","props","keyring","setAccountAddress","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","map","account","key","address","value","text","meta","name","toUpperCase","icon","initialAddress","length","useEffect","Menu","attached","tabular","style","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","Icon","circular","color","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","Balances","api","accounts","accountNames","balances","setBalances","addresses","useMemo","unsubscribeAll","query","freeBalance","multi","currentBalances","balancesMap","reduce","acc","index","toString","then","unsub","catch","console","error","Grid","Column","Table","celled","striped","Body","Row","Cell","textAlign","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","number","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","label","extra","ChainState","modulesList","setModulesList","output","setOutput","storageItemsList","setStorageItemsList","module","storageItem","input","formState","setFormState","modules","Object","keys","sort","storageItems","storage","data","state","runQuery","a","result","Form","Field","fluid","Input","type","Button","onClick","primary","Metadata","util","require","util_crypto","window","Events","eventFeed","setEventFeed","filter","system","events","forEach","record","event","phase","types","typeDef","eventName","section","method","params","includes","feedEvent","date","summary","extraText","documentation","join","content","e","Feed","overflow","maxHeight","TxButton","accountPair","setStatus","tx","disabled","sudo","makeCall","source","isInjected","web3FromSource","injected","fromParam","setSigner","signer","signAndSend","status","isFinalized","asFinalized","Extrinsics","callableFunctionList","setCallableFunctionList","callableFunction","callableFunctions","callable","metadata","setMetadata","version","setVersion","rpc","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","href","ProofOfExistence","fileReader","digest","setDigest","owner","setOwner","block","setBlock","bufferToDigest","Array","from","Uint8Array","b","padStart","hash","blake2AsHex","isClaimed","unsubscribe","poe","proofs","success","warning","file","target","files","FileReader","onloadend","readAsArrayBuffer","Message","header","list","createClaim","revokeClaim","Transfer","currentValue","setCurrentValue","formValue","setFormValue","templateModule","something","newValue","isNone","unwrap","doSomething","addressTo","amount","transfer","Upgrade","proposal","setProposal","handleFileRead","buffer","newProposal","setCode","accept","ReactDOM","render","setApi","apiReady","setApiReady","accountLoaded","setAccountLoaded","accountAddress","getPair","provider","WsProvider","ApiPromise","create","isReady","web3Enable","extensions","web3Accounts","injectedAccounts","loadAccounts","loadAll","isDevelopment","loader","Dimmer","active","Loader","contextRef","createRef","ref","Sticky","context","stackable","columns","stretched","document","getElementById"],"mappings":"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","file":"static/js/main.a69dd34c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Menu, Dropdown, Container, Icon, Image } from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { keyring, setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState(\"\");\n\n  // get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: \"user\"\n  }));\n\n  const initialAddress = keyringOptions.length > 0\n    ? keyringOptions[0].value\n    : \"\";\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [])\n\n  return (\n    <Menu\n      attached=\"top\"\n      tabular\n      style={{\n        backgroundColor: \"#fff\",\n        borderColor: \"#fff\",\n        paddingTop: \"1em\",\n        paddingBottom: \"1em\"\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n        <Image src='Substrate-Logo.png' size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position=\"right\">\n          <Icon\n            name=\"users\"\n            size=\"large\"\n            circular\n            color={accountSelected ? \"green\" : \"red\"}\n          ></Icon>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder=\"Select an account\"\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              setAccountAddress(dropdown.value);\n              setAccountSelected(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport { Table, Grid } from \"semantic-ui-react\";\n\nexport default function Balances(props) {\n  const { api, keyring } = props;\n  const accounts = keyring.getPairs();\n  const accountNames = accounts.map(account => account.meta.name);\n  const [balances, setBalances] = useState({});\n  const addresses = useMemo(() => accounts.map(account => account.address),[accounts]);\n\n  useEffect(() => {\n    let unsubscribeAll;\n\n    api.query.balances.freeBalance\n      .multi(addresses, currentBalances => {\n        const balancesMap = addresses.reduce(\n          (acc, address, index) => ({\n            ...acc,\n            [address]: currentBalances[index].toString()\n          }),\n          {}\n        );\n        setBalances(balancesMap);\n      })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.balances.freeBalance, setBalances]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size=\"small\">\n        <Table.Body>\n          {addresses.map((address, index) => {\n            return (\n              <Table.Row key={index}>\n                <Table.Cell textAlign=\"right\">{accountNames[index]}</Table.Cell>\n                <Table.Cell>{address}</Table.Cell>\n                <Table.Cell>{balances && balances[address]}</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Statistic, Grid, Card, Icon } from \"semantic-ui-react\";\n\nexport default function BlockNumber(props) {\n  const { api, finalized } = props;\n\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll;\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n    .then(unsub => {\n      unsubscribeAll = unsub;\n    })\n    .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <>\n      <Grid.Column>\n        <Card>\n          <Card.Content textAlign=\"center\">\n            <Statistic\n              label={(finalized ? \"Finalized\" : \"Current\") + \" Block Number\"}\n              value={blockNumber}\n            />\n          </Card.Content>\n          <Card.Content extra>\n            <Icon name=\"time\" /> {blockNumberTimer}\n          </Card.Content>\n        </Card>\n      </Grid.Column>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Form, Dropdown, Button, Input } from \"semantic-ui-react\";\n\nexport default function ChainState(props) {\n  const { api } = props;\n\n  const [modulesList, setModulesList] = useState([]);\n  const [output, setOutput] = useState(\"\");\n  const [storageItemsList, setStorageItemsList] = useState([]);\n\n  const initialState = {\n    module: \"\",\n    storageItem: \"\",\n    input: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { module, storageItem, input } = formState;\n\n  useEffect(() => {\n    let modules = Object.keys(api.query).sort().map(module => ({\n      key: module,\n      value: module,\n      text: module\n    }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== \"\") {\n      let storageItems = Object.keys(api.query[module]).sort().map(storage => ({\n        key: storage,\n        value: storage,\n        text: storage\n      }));\n\n      setStorageItemsList(storageItems);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  const runQuery = async () => {\n    try {\n      let result = await api.query[module][storageItem](input);\n      setOutput(result.toString());\n    } catch (e) {\n\t\tsetOutput(e.toString())\n\t}\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Chain State</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a module to query\"\n            fluid\n            label=\"Module\"\n            onChange={onChange}\n            search\n            selection\n            state=\"module\"\n            options={modulesList}\n            value={module}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a storage item to query\"\n            fluid\n            label=\"Storage Item\"\n            onChange={onChange}\n            search\n            selection\n            state=\"storageItem\"\n            options={storageItemsList}\n            value={storageItem}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Input\"\n            fluid\n            placeholder=\"May not be needed\"\n            state=\"input\"\n            type=\"text\"\n            value={input}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Button onClick={runQuery} primary type=\"submit\">\n            Query\n          </Button>{\" \"}\n          {output}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","// This component will simply add utility functions to your developer console.\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  let util = require(\"@polkadot/util\");\n  let util_crypto = require(\"@polkadot/util-crypto\");\n  let keyring = require(\"@polkadot/keyring\");\n\n  window.api = api;\n  window.util = util;\n  window.util_crypto = util_crypto;\n  window.keyring = keyring;\n\n  return null;\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Feed, Grid } from \"semantic-ui-react\";\n\nexport default function Events(props) {\n  const { api } = props;\n\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        let eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        // loop through each of the parameters, displaying the type and data\n        let params = event.data.map((data, index) => {\n          return `${types[index].type}: ${data.toString()}`;\n        });\n\n        if (!filter.includes(eventName)) {\n          let feedEvent = {\n            icon: \"bell\",\n            date: \"X Blocks Ago\",\n            summary: eventName,\n            extraText: event.meta.documentation.join().toString(),\n            content: params\n          };\n\n          setEventFeed(e => [feedEvent, ...e]);\n        }\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: \"auto\", maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { web3FromSource } from \"@polkadot/extension-dapp\";\n\nexport default function TxButton({\n  api,\n  accountPair,\n  label,\n  params,\n  setStatus,\n  tx,\n  disabled,\n  sudo = false\n}) {\n  const makeCall = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    //set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus(\"Sending...\");\n\n    // Check if this transaction needs sudo\n    let transaction;\n    if (sudo) {\n      transaction = tx.sudo(...params);\n    } else {\n      transaction = tx(...params);\n    }\n\n    transaction\n      .signAndSend(fromParam, ({ status }) => {\n        if (status.isFinalized) {\n          setStatus(\n            `Completed at block hash #${status.asFinalized.toString()}`\n          );\n        } else {\n          setStatus(`Current transaction status: ${status.type}`);\n        }\n      })\n      .catch(e => {\n        setStatus(\":( transaction failed\");\n        console.error(\"ERROR:\", e);\n      });\n  };\n\n  return (\n    <Button onClick={makeCall} primary type=\"submit\" disabled={!accountPair || disabled}>\n      {label}\n    </Button>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Form, Dropdown, Input } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair } = props;\n\n  const [modulesList, setModulesList] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [callableFunctionList, setCallableFunctionList] = useState([]);\n\n  const initialState = {\n    module: \"\",\n    callableFunction: \"\",\n    input: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { module, callableFunction, input } = formState;\n\n  useEffect(() => {\n    let modules = Object.keys(api.tx)\n      .sort()\n      .map(module => ({\n        key: module,\n        value: module,\n        text: module\n      }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== \"\") {\n      let callableFunctions = Object.keys(api.tx[module])\n        .sort()\n        .map(callable => ({\n          key: callable,\n          value: callable,\n          text: callable\n        }));\n\n      setCallableFunctionList(callableFunctions);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Extrinsics</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a module to call\"\n            fluid\n            label=\"Module\"\n            onChange={onChange}\n            search\n            selection\n            state=\"module\"\n            options={modulesList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder=\"Select a function to call\"\n            fluid\n            label=\"Callable Function\"\n            onChange={onChange}\n            search\n            selection\n            state=\"callableFunction\"\n            options={callableFunctionList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Input\"\n            fluid\n            placeholder=\"May not be needed\"\n            state=\"input\"\n            type=\"text\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Call\"}\n            params={[input]}\n            setStatus={setStatus}\n            tx={api.tx && api.tx[module] && api.tx[module][callableFunction]}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Modal, Button, Card } from \"semantic-ui-react\";\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  const [metadata, setMetadata] = useState(0);\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    api.rpc.state.getMetadata(meta => {\n\t  setMetadata(meta);\n\t  setVersion(meta.version);\n    });\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n\t\t  <Card.Meta>\n            <span>v{version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Card, Icon, Grid } from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { api } = props;\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = () => {\n      Promise.all([\n        api.rpc.system.chain(),\n        api.rpc.system.name(),\n        api.rpc.system.version()\n      ])\n        .then(([chain, nodeName, nodeVersion]) => {\n          setNodeInfo({\n            chain,\n            nodeName,\n            nodeVersion\n          });\n        })\n        .catch(e => console.error(e));\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{\" \"}\n            <a href=\"https://github.com/substrate-developer-hub/substrate-front-end-template\">\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name=\"setting\" />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Grid, Message } from \"semantic-ui-react\";\nimport { blake2AsHex } from \"@polkadot/util-crypto\";\n\nimport TxButton from \"../TxButton\";\n\n// Based on the Substrate Proof of Existence module\n// https://github.com/substrate-developer-hub/substrate-proof-of-existence\n\nexport default function ProofOfExistence(props) {\n  const { api, accountPair } = props;\n  const [status, setStatus] = useState(\"\");\n  const [digest, setDigest] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [block, setBlock] = useState(0);\n\n  let fileReader;\n\n  const bufferToDigest = () => {\n    const content = Array.from(new Uint8Array(fileReader.result))\n      .map(b => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n\n    const hash = blake2AsHex(content, 256);\n    setDigest(hash);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = bufferToDigest;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  useEffect(() => {\n    let unsubscribe;\n\n    api.query.poe\n      .proofs(digest, result => {\n        setOwner(result[0].toString());\n        setBlock(result[1].toNumber());\n      })\n      .then(unsub => {\n        unsubscribe = unsub;\n      });\n\n    return () => unsubscribe && unsubscribe();\n  }, [digest, api.query.poe]);\n\n  function isClaimed() {\n    return block !== 0;\n  }\n\n  return (\n    <Grid.Column>\n      <h1>Proof Of Existence</h1>\n      <Form success={digest && !isClaimed()} warning={isClaimed()}>\n        <Form.Field>\n          <Input\n            type=\"file\"\n            id=\"file\"\n            label=\"Your File\"\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n          <Message success header=\"File Digest Unclaimed\" content={digest} />\n          <Message\n            warning\n            header=\"File Digest Claimed\"\n            list={[digest, `Owner: ${owner}`, `Block: ${block}`]}\n          />\n        </Form.Field>\n\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Create Claim\"}\n            setStatus={setStatus}\n            params={[digest]}\n            tx={api.tx.poe.createClaim}\n            disabled={isClaimed() || !digest}\n          />\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Revoke Claim\"}\n            setStatus={setStatus}\n            params={[digest]}\n            tx={api.tx.poe.revokeClaim}\n            disabled={!isClaimed() || owner !== accountPair.address}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Grid, Card, Statistic } from \"semantic-ui-react\";\n\nimport TxButton from \"../TxButton\";\n\nexport default function Transfer(props) {\n  const { api, accountPair } = props;\n\n  // The transaction submission status\n  const [status, setStatus] = useState(\"\");\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone){\n        setCurrentValue(\"<None>\");\n      }\n      else{\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    })\n    .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n\n  }, [api.query.templateModule]);\n\n\n  return (\n    <Grid.Column>\n      <h1>Template Module</h1>\n      <Card>\n      <Card.Content textAlign=\"center\">\n        <Statistic\n          label=\"Current Value\"\n          value={currentValue}\n        />\n      </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            type=\"number\"\n            id=\"new_value\"\n            state=\"newValue\"\n            label=\"New Value\"\n            onChange={(_, {value}) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Store Something\"}\n            params={[formValue]}\n            setStatus={setStatus}\n            tx={api.tx.templateModule.doSomething}\n            sudo={false}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Form, Input, Grid } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Transfer(props) {\n  const { api, accountPair } = props;\n  const [status, setStatus] = useState(\"\");\n  const initialState = {\n    addressTo: \"\",\n    amount: 0\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { addressTo, amount } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"To\"\n            fluid\n            placeholder=\"address\"\n            state=\"addressTo\"\n            type=\"text\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            label=\"Amount\"\n            fluid\n            onChange={onChange}\n            state=\"amount\"\n            type=\"number\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Send\"}\n            params={[addressTo, amount]}\n            setStatus={setStatus}\n            tx={api.tx.balances.transfer}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Form, Input, Grid } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Upgrade(props) {\n  const { api, accountPair } = props;\n  const [status, setStatus] = useState(\"\");\n  const [proposal, setProposal] = useState({});\n\n  let fileReader;\n\n  const bufferToHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, \"0\"))\n      .join(\"\");\n  };\n\n  const handleFileRead = e => {\n    const content = bufferToHex(fileReader.result);\n    const newProposal = api.tx.system.setCode(`0x${content}`);\n    setProposal(newProposal);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Upgrade Runtime</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            type=\"file\"\n            id=\"file\"\n            label=\"Wasm File\"\n            accept=\".wasm\"\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Upgrade\"}\n            params={[proposal]}\n            setStatus={setStatus}\n            tx={api.tx.sudo}\n            sudo={true}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport { web3Accounts, web3Enable } from \"@polkadot/extension-dapp\";\nimport keyring from \"@polkadot/ui-keyring\";\nimport React, { useState, useEffect, createRef } from \"react\";\nimport { Container, Dimmer, Loader, Grid, Sticky } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport AccountSelector from \"./AccountSelector\";\nimport Balances from \"./Balances\";\nimport BlockNumber from \"./BlockNumber\";\nimport ChainState from \"./ChainState\";\nimport DeveloperConsole from \"./DeveloperConsole\";\nimport Events from \"./Events\";\nimport Extrinsics from \"./Extrinsics\";\nimport Metadata from \"./Metadata\";\nimport NodeInfo from \"./NodeInfo\";\nimport ProofOfExistence from \"./examples/ProofOfExistence\";\nimport TemplateModule from \"./examples/TemplateModule\";\nimport Transfer from \"./Transfer\";\nimport Upgrade from \"./Upgrade\";\n\nexport default function App() {\n  const [api, setApi] = useState();\n  const [apiReady, setApiReady] = useState();\n  const [accountLoaded, setAccountLoaded] = useState(false);\n  const [accountAddress, setAccountAddress] = useState(\"\");\n\n  //const WS_PROVIDER = \"ws://127.0.0.1:9944\";\n  const WS_PROVIDER = \"wss://dev-node.substrate.dev:9944\";\n\n  const accountPair = accountAddress && keyring.getPair(accountAddress);\n\n  useEffect(() => {\n    const provider = new WsProvider(WS_PROVIDER);\n\n    const TYPES = {};\n    //const TYPES = {\"MyNumber\": \"u32\"};\n    // More information on custom types\n    // https://github.com/polkadot-js/apps/blob/master/packages/app-settings/src/md/basics.md\n\n    ApiPromise.create({\n      provider,\n      types: TYPES\n    })\n      .then(api => {\n        setApi(api);\n        api.isReady.then(() => setApiReady(true));\n      })\n      .catch(e => console.error(e));\n  }, []);\n\n  // new hook to get injected accounts\n  useEffect(() => {\n    web3Enable(\"substrate-front-end-tutorial\")\n      .then(extensions => {\n        // web3Account promise resolves with an array of injected accounts\n        // or an empty array (e.g user has no extension, or not given access to their accounts)\n        web3Accounts()\n          .then(accounts => {\n            // add the source to the name to avoid confusion\n            return accounts.map(({ address, meta }) => ({\n              address,\n              meta: {\n                ...meta,\n                name: `${meta.name} (${meta.source})`\n              }\n            }));\n          })\n          // load our keyring with the newly injected accounts\n          .then(injectedAccounts => {\n            loadAccounts(injectedAccounts);\n          })\n          .catch(console.error);\n      })\n      .catch(console.error);\n  }, []);\n\n  const loadAccounts = injectedAccounts => {\n    keyring.loadAll(\n      {\n        isDevelopment: true\n      },\n      injectedAccounts\n    );\n    setAccountLoaded(true);\n  };\n\n  const loader = function(text) {\n    return (\n      <Dimmer active>\n        <Loader size=\"small\">{text}</Loader>\n      </Dimmer>\n    );\n  };\n\n  if (!apiReady) {\n    return loader(\"Connecting to the blockchain\");\n  }\n\n  if (!accountLoaded) {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector\n          keyring={keyring}\n          setAccountAddress={setAccountAddress}\n        />\n      </Sticky>\n      <Container>\n        <Grid stackable columns=\"equal\">\n          <Grid.Row stretched>\n            <NodeInfo api={api} />\n            <Metadata api={api} />\n            <BlockNumber api={api} />\n            <BlockNumber api={api} finalized />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Balances api={api} keyring={keyring} />\n          </Grid.Row>\n          <Grid.Row>\n            <Transfer api={api} accountPair={accountPair} />\n            <Upgrade api={api} accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row>\n            <Extrinsics api={api} accountPair={accountPair} />\n            <ChainState api={api} />\n            <Events api={api} />\n          </Grid.Row>\n          {/* These components render if a module is present in the runtime. */}\n          <Grid.Row>\n            { api.query.poe && <ProofOfExistence api={api} accountPair={accountPair}/> }\n            { api.query.templateModule && <TemplateModule api={api} accountPair={accountPair} /> }\n          </Grid.Row>\n        </Grid>\n        {/* These components don't render elements. */}\n        <DeveloperConsole api={api} />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}