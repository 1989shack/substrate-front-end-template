{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/useSubstrate.js","substrate-lib/components/DeveloperConsole.js","substrate-lib/components/TxButton.js","AccountSelector.js","Balances.js","BlockNumber.js","ChainState.js","Events.js","Extrinsics.js","Metadata.js","NodeInfo.js","TemplateModule.js","Transfer.js","Upgrade.js","App.js","index.js"],"names":["config","require","INIT_STATE","socket","PROVIDER_SOCKET","types","CUSTOM_TYPES","keyring","keyringState","api","apiState","reducer","state","action","type","payload","Error","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","Provider","value","children","useSubstrate","useContext","connect","useCallback","a","provider","WsProvider","ApiPromise","create","_api","isReady","console","log","loadAccounts","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","useEffect","DeveloperConsole","window","util","util_crypto","TxButton","accountPair","label","setStatus","style","attrs","disabled","params","sudo","tx","isQuery","transaction","isInjected","web3FromSource","injected","fromParam","setSigner","signer","txExecute","e","error","toString","signAndSend","status","isFinalized","asFinalized","catch","query","result","Button","primary","onClick","AccountSelector","setAccountAddress","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","length","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","Icon","circular","color","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","balances","freeBalance","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","balance","then","unsub","Label","pointing","Main","accounts","setBalances","addresses","unsubscribeAll","multi","currentBalances","balancesMap","reduce","acc","index","Grid","Column","Table","celled","striped","Body","Row","Cell","textAlign","Balances","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","number","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","extra","ChainState","modulesList","setModulesList","storageItemsList","setStorageItemsList","module","storageItem","input","formState","setFormState","modules","Object","keys","sort","storageItems","storage","data","Form","Field","fluid","Input","overflowWrap","Events","eventFeed","setEventFeed","filter","system","events","record","event","phase","typeDef","eventName","section","method","includes","date","summary","extraText","documentation","join","content","Feed","overflow","maxHeight","Extrinsics","callableFunctionList","setCallableFunctionList","callableFunction","callableFunctions","callable","Metadata","version","metadata","setMetadata","rpc","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","NodeInfo","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","href","currentValue","setCurrentValue","formValue","setFormValue","templateModule","something","newValue","isNone","unwrap","doSomething","TemplateModule","addressTo","amount","prevState","transfer","Transfer","Upgrade","fileReader","proposal","setProposal","handleFileRead","buffer","Array","from","Uint8Array","b","padStart","newProposal","setCode","accept","file","target","files","FileReader","onloadend","readAsArrayBuffer","accountAddress","getPair","loader","Dimmer","active","Loader","contextRef","createRef","ref","Sticky","context","stackable","columns","stretched","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b5531a8.chunk.js","sourcesContent":["const configCommon = require('./common.json');\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\nconst config = { ...configCommon, ...configEnv };\n\nexport default config;\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport config from '../config';\n\nconst INIT_STATE = {\n  socket: config.PROVIDER_SOCKET,\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiState: null\n};\n\nconst reducer = (state, action) => {\n  let socket = null;\n\n  switch (action.type) {\n    case 'RESET_SOCKET':\n      socket = action.payload || state.socket;\n      return { ...state, socket, api: null, apiState: null };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  return (\n    <SubstrateContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </SubstrateContext.Provider>\n  );\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nexport { SubstrateContext, SubstrateContextProvider };\n","import { useContext, useEffect, useCallback } from 'react';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\nimport { SubstrateContext } from './SubstrateContext';\n\nconst useSubstrate = () => {\n  const [state, dispatch] = useContext(SubstrateContext);\n\n  // `useCallback` so that returning memoized function and not created\n  //   everytime, and thus re-render.\n  const { api, socket, types } = state;\n  const connect = useCallback(async () => {\n    if (api) return;\n\n    const provider = new WsProvider(socket);\n\n    try {\n      const _api = await ApiPromise.create({ provider, types });\n      dispatch({ type: 'CONNECT', payload: _api });\n      await _api.isReady;\n      dispatch({ type: 'CONNECT_SUCCESS' });\n    } catch (e) {\n      console.log(e);\n      dispatch({ type: 'CONNECT_ERROR' });\n    }\n  }, [api, socket, types, dispatch]);\n\n  // hook to get injected accounts\n  const { keyringState } = state;\n  const loadAccounts = useCallback(async () => {\n    // Ensure the method only run once.\n    if (keyringState) return;\n\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.log(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  }, [keyringState, dispatch]);\n\n  useEffect(() => {\n    connect();\n  }, [connect]);\n\n  useEffect(() => {\n    loadAccounts();\n  }, [loadAccounts]);\n\n  return { ...state, dispatch };\n};\n\nexport default useSubstrate;\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api } = useSubstrate();\n  window.api = api;\n  window.util = require('@polkadot/util');\n  window.util_crypto = require('@polkadot/util-crypto');\n  window.keyring = require('@polkadot/keyring');\n\n  return null;\n}\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\n\nexport default function TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  style = null,\n  type = null,\n  attrs = null,\n  disabled = false\n}) {\n  const { api } = useSubstrate();\n  const { params = null, sudo = false, tx = null } = attrs;\n  const isQuery = () => type === 'QUERY';\n\n  const transaction = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    // set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus('Sending...');\n\n    let txExecute;\n    try {\n      // Check if tx has params\n      if (!params) {\n        txExecute = !sudo ? tx() : tx.sudo();\n      } else {\n        txExecute = !sudo ? tx(...params) : tx.sudo(...params);\n      }\n    } catch (e) {\n      console.error('ERROR forming transaction:', e);\n      setStatus(e.toString());\n    }\n\n    if (txExecute) {\n      txExecute\n        .signAndSend(fromParam, ({ status }) => {\n          status.isFinalized\n            ? setStatus(\n                `Completed at block hash #${status.asFinalized.toString()}`\n            )\n            : setStatus(`Current transaction status: ${status.type}`);\n        })\n        .catch(e => {\n          setStatus(':( transaction failed');\n          console.error('ERROR transaction:', e);\n        });\n    }\n  };\n\n  const query = async () => {\n    try {\n      const result = await tx(...params);\n      setStatus(result.toString());\n    } catch (e) {\n      console.error('ERROR query:', e);\n      setStatus(e.toString());\n    }\n  };\n\n  return (\n    <Button\n      primary\n      style={style}\n      type='submit'\n      onClick={isQuery() ? query : transaction}\n      disabled={disabled || !tx || (!isQuery() && !accountPair)}\n    >\n      {label}\n    </Button>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Menu,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src='Substrate-Logo.png' size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right'>\n          <Icon\n            name='users'\n            size='large'\n            circular\n            color={accountSelected ? 'green' : 'red'}\n          />\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => { onChange(dropdown.value); }}\n            value={accountSelected}\n          />\n          {api.query.balances && api.query.balances.freeBalance\n            ? <BalanceAnnotation accountSelected={accountSelected} />\n            : null}\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.balances.freeBalance(accountSelected, balance => {\n        setAccountBalance(balance.toString());\n      }).then(unsub => {\n        unsubscribe = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [accountSelected, api.query.balances]);\n\n  return accountSelected\n    ? <Label pointing='left'>\n      <Icon\n        name='money bill alternate'\n        color={accountBalance > 0 ? 'green' : 'red'}\n      />\n      {accountBalance}\n    </Label>\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Table, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    api.query.balances.freeBalance\n      .multi(addresses, currentBalances => {\n        const balancesMap = addresses.reduce(\n          (acc, address, index) => ({\n            ...acc, [address]: currentBalances[index].toString()\n          }), {});\n        setBalances(balancesMap);\n      }).then(unsub => {\n        unsubscribeAll = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.balances.freeBalance, setBalances, keyring]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell>{account.address}</Table.Cell>\n            <Table.Cell>{balances && balances[account.address]}</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n\nexport default function Balances (props) {\n  const { api } = useSubstrate();\n  return (api.query.balances && api.query.balances.freeBalance\n    ? <Main {...props} /> : null);\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block Number'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function ChainState (props) {\n  const { api } = useSubstrate();\n  const [modulesList, setModulesList] = useState([]);\n  const [status, setStatus] = useState(null);\n  const [storageItemsList, setStorageItemsList] = useState([]);\n\n  const initialState = {\n    module: '',\n    storageItem: '',\n    input: ''\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { module, storageItem, input } = formState;\n\n  useEffect(() => {\n    const modules = Object.keys(api.query).sort().map(module => ({\n      key: module,\n      value: module,\n      text: module\n    }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== '') {\n      const storageItems = Object.keys(api.query[module]).sort().map(storage => ({\n        key: storage,\n        value: storage,\n        text: storage\n      }));\n\n      setStorageItemsList(storageItems);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Chain State</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a module to query'\n            fluid\n            label='Module'\n            onChange={onChange}\n            search\n            selection\n            state='module'\n            options={modulesList}\n            value={module}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a storage item to query'\n            fluid\n            label='Storage Item'\n            onChange={onChange}\n            search\n            selection\n            state='storageItem'\n            options={storageItemsList}\n            value={storageItem}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label='Input'\n            fluid\n            placeholder='May not be needed'\n            state='input'\n            type='text'\n            value={input}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            label='Query'\n            setStatus={setStatus}\n            type='QUERY'\n            attrs={{\n              params: [input],\n              tx: (api.query[module] && api.query[module][storageItem])\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Feed, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        const eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        if (filter.includes(eventName)) return;\n\n        // loop through each of the parameters, displaying the type and data\n        const params = event.data.map((data, index) =>\n          `${types[index].type}: ${data.toString()}`\n        );\n\n        setEventFeed(e => [{\n          icon: 'bell',\n          date: 'X Blocks Ago',\n          summary: `${eventName}-${e.length}`,\n          extraText: event.meta.documentation.join(', ').toString(),\n          content: params.join(', ')\n        }, ...e]);\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: 'auto', maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Extrinsics (props) {\n  const { api } = useSubstrate();\n  const [modulesList, setModulesList] = useState([]);\n  const [status, setStatus] = useState(null);\n  const [callableFunctionList, setCallableFunctionList] = useState([]);\n  const { accountPair } = props;\n\n  const [formState, setFormState] = useState({\n    module: '',\n    callableFunction: '',\n    input: ''\n  });\n  const { module, callableFunction, input } = formState;\n\n  useEffect(() => {\n    const modules = Object.keys(api.tx)\n      .sort()\n      .map(module => ({\n        key: module,\n        value: module,\n        text: module\n      }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== '') {\n      const callableFunctions = Object.keys(api.tx[module])\n        .sort()\n        .map(callable => ({\n          key: callable,\n          value: callable,\n          text: callable\n        }));\n\n      setCallableFunctionList(callableFunctions);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) =>\n    setFormState(formState => ({ ...formState, [data.state]: data.value }));\n\n  return (\n    <Grid.Column>\n      <h1>Extrinsics</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a module to call'\n            fluid\n            label='Module'\n            onChange={onChange}\n            search\n            selection\n            state='module'\n            options={modulesList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a function to call'\n            fluid\n            label='Callable Function'\n            onChange={onChange}\n            search\n            selection\n            state='callableFunction'\n            options={callableFunctionList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label='Input'\n            fluid\n            placeholder='May not be needed'\n            state='input'\n            type='text'\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Call'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: input ? [input] : null,\n              tx: api.tx[module] && api.tx[module][callableFunction]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta><span>v{metadata.version}</span></Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre><code>{JSON.stringify(metadata.data, null, 2)}</code></pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  // The transaction submission status\n  const [status, setStatus] = useState('');\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone) {\n        setCurrentValue('<None>');\n      } else {\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.templateModule]);\n\n  return (\n    <Grid.Column>\n      <h1>Template Module</h1>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Value'\n            value={currentValue}\n          />\n        </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            type='number'\n            id='new_value'\n            state='newValue'\n            label='New Value'\n            onChange={(_, { value }) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Store Something'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [formValue],\n              tx: api.tx.templateModule.doSomething\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function TemplateModule (props) {\n  const { api } = useSubstrate();\n  return (api.query.templateModule && api.query.templateModule.something\n    ? <Main {...props} /> : null);\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const [formState, setFormState] = useState({ addressTo: null, amount: 0 });\n  const { accountPair } = props;\n\n  const onChange = (_, data) =>\n    setFormState(prevState => ({ ...formState, [data.state]: data.value }));\n\n  const { addressTo, amount } = formState;\n\n  return (\n    <Grid.Column>\n      <h1>Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            fluid label='To' type='text' placeholder='address'\n            state='addressTo' onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            fluid label='Amount' type='number'\n            state='amount' onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Send'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [addressTo, amount],\n              tx: api.tx.balances.transfer\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function Transfer (props) {\n  const { api } = useSubstrate();\n  const result = (api.query.balances && api.tx.balances.transfer\n    ? <Main {...props} /> : null);\n  console.log(result);\n  return result;\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Upgrade (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState('');\n  const [proposal, setProposal] = useState({});\n  const { accountPair } = props;\n\n  let fileReader;\n\n  const bufferToHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n  };\n\n  const handleFileRead = e => {\n    const content = bufferToHex(fileReader.result);\n    const newProposal = api.tx.system.setCode(`0x${content}`);\n    setProposal(newProposal);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Upgrade Runtime</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            type='file'\n            id='file'\n            label='Wasm File'\n            accept='.wasm'\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Upgrade'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [proposal],\n              sudo: true,\n              tx: api.tx.sudo\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport Balances from './Balances';\nimport BlockNumber from './BlockNumber';\nimport ChainState from './ChainState';\nimport Events from './Events';\nimport Extrinsics from './Extrinsics';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Transfer from './Transfer';\nimport Upgrade from './Upgrade';\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text => (\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>\n  );\n\n  if (apiState === 'ERROR') return loader('Error connecting to the blockchain');\n  else if (apiState !== 'READY') return loader('Connecting to the blockchain');\n\n  if (keyringState !== 'READY') {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Balances />\n          </Grid.Row>\n          <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row>\n            <Extrinsics accountPair={accountPair} />\n            <ChainState />\n            <Events />\n          </Grid.Row>\n          <Grid.Row>\n            <TemplateModule accountPair={accountPair} />\n          </Grid.Row>\n        </Grid>\n        <DeveloperConsole />\n      </Container>\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}